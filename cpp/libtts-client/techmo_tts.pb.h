// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: techmo_tts.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_techmo_5ftts_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_techmo_5ftts_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_techmo_5ftts_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_techmo_5ftts_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_techmo_5ftts_2eproto;
namespace techmo {
namespace tts {
class AudioConfig;
class AudioConfigDefaultTypeInternal;
extern AudioConfigDefaultTypeInternal _AudioConfig_default_instance_;
class AudioData;
class AudioDataDefaultTypeInternal;
extern AudioDataDefaultTypeInternal _AudioData_default_instance_;
class DeleteLexiconRequest;
class DeleteLexiconRequestDefaultTypeInternal;
extern DeleteLexiconRequestDefaultTypeInternal _DeleteLexiconRequest_default_instance_;
class DeleteLexiconResponse;
class DeleteLexiconResponseDefaultTypeInternal;
extern DeleteLexiconResponseDefaultTypeInternal _DeleteLexiconResponse_default_instance_;
class Error;
class ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class GetLexiconRequest;
class GetLexiconRequestDefaultTypeInternal;
extern GetLexiconRequestDefaultTypeInternal _GetLexiconRequest_default_instance_;
class GetLexiconResponse;
class GetLexiconResponseDefaultTypeInternal;
extern GetLexiconResponseDefaultTypeInternal _GetLexiconResponse_default_instance_;
class ListLexiconsRequest;
class ListLexiconsRequestDefaultTypeInternal;
extern ListLexiconsRequestDefaultTypeInternal _ListLexiconsRequest_default_instance_;
class ListLexiconsResponse;
class ListLexiconsResponseDefaultTypeInternal;
extern ListLexiconsResponseDefaultTypeInternal _ListLexiconsResponse_default_instance_;
class ListVoicesRequest;
class ListVoicesRequestDefaultTypeInternal;
extern ListVoicesRequestDefaultTypeInternal _ListVoicesRequest_default_instance_;
class ListVoicesResponse;
class ListVoicesResponseDefaultTypeInternal;
extern ListVoicesResponseDefaultTypeInternal _ListVoicesResponse_default_instance_;
class PutLexiconRequest;
class PutLexiconRequestDefaultTypeInternal;
extern PutLexiconRequestDefaultTypeInternal _PutLexiconRequest_default_instance_;
class PutLexiconResponse;
class PutLexiconResponseDefaultTypeInternal;
extern PutLexiconResponseDefaultTypeInternal _PutLexiconResponse_default_instance_;
class SynthesizeConfig;
class SynthesizeConfigDefaultTypeInternal;
extern SynthesizeConfigDefaultTypeInternal _SynthesizeConfig_default_instance_;
class SynthesizeRequest;
class SynthesizeRequestDefaultTypeInternal;
extern SynthesizeRequestDefaultTypeInternal _SynthesizeRequest_default_instance_;
class SynthesizeResponse;
class SynthesizeResponseDefaultTypeInternal;
extern SynthesizeResponseDefaultTypeInternal _SynthesizeResponse_default_instance_;
class Voice;
class VoiceDefaultTypeInternal;
extern VoiceDefaultTypeInternal _Voice_default_instance_;
class VoiceInfo;
class VoiceInfoDefaultTypeInternal;
extern VoiceInfoDefaultTypeInternal _VoiceInfo_default_instance_;
}  // namespace tts
}  // namespace techmo
PROTOBUF_NAMESPACE_OPEN
template<> ::techmo::tts::AudioConfig* Arena::CreateMaybeMessage<::techmo::tts::AudioConfig>(Arena*);
template<> ::techmo::tts::AudioData* Arena::CreateMaybeMessage<::techmo::tts::AudioData>(Arena*);
template<> ::techmo::tts::DeleteLexiconRequest* Arena::CreateMaybeMessage<::techmo::tts::DeleteLexiconRequest>(Arena*);
template<> ::techmo::tts::DeleteLexiconResponse* Arena::CreateMaybeMessage<::techmo::tts::DeleteLexiconResponse>(Arena*);
template<> ::techmo::tts::Error* Arena::CreateMaybeMessage<::techmo::tts::Error>(Arena*);
template<> ::techmo::tts::GetLexiconRequest* Arena::CreateMaybeMessage<::techmo::tts::GetLexiconRequest>(Arena*);
template<> ::techmo::tts::GetLexiconResponse* Arena::CreateMaybeMessage<::techmo::tts::GetLexiconResponse>(Arena*);
template<> ::techmo::tts::ListLexiconsRequest* Arena::CreateMaybeMessage<::techmo::tts::ListLexiconsRequest>(Arena*);
template<> ::techmo::tts::ListLexiconsResponse* Arena::CreateMaybeMessage<::techmo::tts::ListLexiconsResponse>(Arena*);
template<> ::techmo::tts::ListVoicesRequest* Arena::CreateMaybeMessage<::techmo::tts::ListVoicesRequest>(Arena*);
template<> ::techmo::tts::ListVoicesResponse* Arena::CreateMaybeMessage<::techmo::tts::ListVoicesResponse>(Arena*);
template<> ::techmo::tts::PutLexiconRequest* Arena::CreateMaybeMessage<::techmo::tts::PutLexiconRequest>(Arena*);
template<> ::techmo::tts::PutLexiconResponse* Arena::CreateMaybeMessage<::techmo::tts::PutLexiconResponse>(Arena*);
template<> ::techmo::tts::SynthesizeConfig* Arena::CreateMaybeMessage<::techmo::tts::SynthesizeConfig>(Arena*);
template<> ::techmo::tts::SynthesizeRequest* Arena::CreateMaybeMessage<::techmo::tts::SynthesizeRequest>(Arena*);
template<> ::techmo::tts::SynthesizeResponse* Arena::CreateMaybeMessage<::techmo::tts::SynthesizeResponse>(Arena*);
template<> ::techmo::tts::Voice* Arena::CreateMaybeMessage<::techmo::tts::Voice>(Arena*);
template<> ::techmo::tts::VoiceInfo* Arena::CreateMaybeMessage<::techmo::tts::VoiceInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace techmo {
namespace tts {

enum AudioEncoding : int {
  PCM16 = 0,
  OGG_VORBIS = 1,
  AudioEncoding_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AudioEncoding_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AudioEncoding_IsValid(int value);
constexpr AudioEncoding AudioEncoding_MIN = PCM16;
constexpr AudioEncoding AudioEncoding_MAX = OGG_VORBIS;
constexpr int AudioEncoding_ARRAYSIZE = AudioEncoding_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AudioEncoding_descriptor();
template<typename T>
inline const std::string& AudioEncoding_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AudioEncoding>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AudioEncoding_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AudioEncoding_descriptor(), enum_t_value);
}
inline bool AudioEncoding_Parse(
    const std::string& name, AudioEncoding* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AudioEncoding>(
    AudioEncoding_descriptor(), name, value);
}
enum Gender : int {
  GENDER_UNSPECIFIED = 0,
  FEMALE = 1,
  MALE = 2,
  Gender_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Gender_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Gender_IsValid(int value);
constexpr Gender Gender_MIN = GENDER_UNSPECIFIED;
constexpr Gender Gender_MAX = MALE;
constexpr int Gender_ARRAYSIZE = Gender_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gender_descriptor();
template<typename T>
inline const std::string& Gender_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Gender>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Gender_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Gender_descriptor(), enum_t_value);
}
inline bool Gender_Parse(
    const std::string& name, Gender* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Gender>(
    Gender_descriptor(), name, value);
}
enum Age : int {
  AGE_UNSPECIFIED = 0,
  ADULT = 1,
  CHILD = 2,
  SENILE = 3,
  Age_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Age_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Age_IsValid(int value);
constexpr Age Age_MIN = AGE_UNSPECIFIED;
constexpr Age Age_MAX = SENILE;
constexpr int Age_ARRAYSIZE = Age_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Age_descriptor();
template<typename T>
inline const std::string& Age_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Age>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Age_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Age_descriptor(), enum_t_value);
}
inline bool Age_Parse(
    const std::string& name, Age* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Age>(
    Age_descriptor(), name, value);
}
enum ErrorCode : int {
  UNKNOWN = 0,
  LICENCE = 1,
  MISSING_OBJECT = 2,
  SSML = 3,
  TEXT_NORMALIZATION = 4,
  TRANSCRIPTION = 5,
  SYNTHESIS = 6,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ErrorCode_IsValid(int value);
constexpr ErrorCode ErrorCode_MIN = UNKNOWN;
constexpr ErrorCode ErrorCode_MAX = SYNTHESIS;
constexpr int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor();
template<typename T>
inline const std::string& ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ErrorCode_descriptor(), enum_t_value);
}
inline bool ErrorCode_Parse(
    const std::string& name, ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================

class ListVoicesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:techmo.tts.ListVoicesRequest) */ {
 public:
  ListVoicesRequest();
  virtual ~ListVoicesRequest();

  ListVoicesRequest(const ListVoicesRequest& from);
  ListVoicesRequest(ListVoicesRequest&& from) noexcept
    : ListVoicesRequest() {
    *this = ::std::move(from);
  }

  inline ListVoicesRequest& operator=(const ListVoicesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVoicesRequest& operator=(ListVoicesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListVoicesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListVoicesRequest* internal_default_instance() {
    return reinterpret_cast<const ListVoicesRequest*>(
               &_ListVoicesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ListVoicesRequest& a, ListVoicesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVoicesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListVoicesRequest* New() const final {
    return CreateMaybeMessage<ListVoicesRequest>(nullptr);
  }

  ListVoicesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListVoicesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListVoicesRequest& from);
  void MergeFrom(const ListVoicesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVoicesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "techmo.tts.ListVoicesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_techmo_5ftts_2eproto);
    return ::descriptor_table_techmo_5ftts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageFieldNumber = 1,
  };
  // string language = 1;
  void clear_language();
  const std::string& language() const;
  void set_language(const std::string& value);
  void set_language(std::string&& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // @@protoc_insertion_point(class_scope:techmo.tts.ListVoicesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_techmo_5ftts_2eproto;
};
// -------------------------------------------------------------------

class ListVoicesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:techmo.tts.ListVoicesResponse) */ {
 public:
  ListVoicesResponse();
  virtual ~ListVoicesResponse();

  ListVoicesResponse(const ListVoicesResponse& from);
  ListVoicesResponse(ListVoicesResponse&& from) noexcept
    : ListVoicesResponse() {
    *this = ::std::move(from);
  }

  inline ListVoicesResponse& operator=(const ListVoicesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVoicesResponse& operator=(ListVoicesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListVoicesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListVoicesResponse* internal_default_instance() {
    return reinterpret_cast<const ListVoicesResponse*>(
               &_ListVoicesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListVoicesResponse& a, ListVoicesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVoicesResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListVoicesResponse* New() const final {
    return CreateMaybeMessage<ListVoicesResponse>(nullptr);
  }

  ListVoicesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListVoicesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListVoicesResponse& from);
  void MergeFrom(const ListVoicesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVoicesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "techmo.tts.ListVoicesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_techmo_5ftts_2eproto);
    return ::descriptor_table_techmo_5ftts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoicesFieldNumber = 1,
  };
  // repeated .techmo.tts.VoiceInfo voices = 1;
  int voices_size() const;
  private:
  int _internal_voices_size() const;
  public:
  void clear_voices();
  ::techmo::tts::VoiceInfo* mutable_voices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::techmo::tts::VoiceInfo >*
      mutable_voices();
  private:
  const ::techmo::tts::VoiceInfo& _internal_voices(int index) const;
  ::techmo::tts::VoiceInfo* _internal_add_voices();
  public:
  const ::techmo::tts::VoiceInfo& voices(int index) const;
  ::techmo::tts::VoiceInfo* add_voices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::techmo::tts::VoiceInfo >&
      voices() const;

  // @@protoc_insertion_point(class_scope:techmo.tts.ListVoicesResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::techmo::tts::VoiceInfo > voices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_techmo_5ftts_2eproto;
};
// -------------------------------------------------------------------

class SynthesizeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:techmo.tts.SynthesizeRequest) */ {
 public:
  SynthesizeRequest();
  virtual ~SynthesizeRequest();

  SynthesizeRequest(const SynthesizeRequest& from);
  SynthesizeRequest(SynthesizeRequest&& from) noexcept
    : SynthesizeRequest() {
    *this = ::std::move(from);
  }

  inline SynthesizeRequest& operator=(const SynthesizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SynthesizeRequest& operator=(SynthesizeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SynthesizeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SynthesizeRequest* internal_default_instance() {
    return reinterpret_cast<const SynthesizeRequest*>(
               &_SynthesizeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SynthesizeRequest& a, SynthesizeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SynthesizeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SynthesizeRequest* New() const final {
    return CreateMaybeMessage<SynthesizeRequest>(nullptr);
  }

  SynthesizeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SynthesizeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SynthesizeRequest& from);
  void MergeFrom(const SynthesizeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SynthesizeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "techmo.tts.SynthesizeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_techmo_5ftts_2eproto);
    return ::descriptor_table_techmo_5ftts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kConfigFieldNumber = 2,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // .techmo.tts.SynthesizeConfig config = 2;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::techmo::tts::SynthesizeConfig& config() const;
  ::techmo::tts::SynthesizeConfig* release_config();
  ::techmo::tts::SynthesizeConfig* mutable_config();
  void set_allocated_config(::techmo::tts::SynthesizeConfig* config);
  private:
  const ::techmo::tts::SynthesizeConfig& _internal_config() const;
  ::techmo::tts::SynthesizeConfig* _internal_mutable_config();
  public:

  // @@protoc_insertion_point(class_scope:techmo.tts.SynthesizeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::techmo::tts::SynthesizeConfig* config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_techmo_5ftts_2eproto;
};
// -------------------------------------------------------------------

class SynthesizeConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:techmo.tts.SynthesizeConfig) */ {
 public:
  SynthesizeConfig();
  virtual ~SynthesizeConfig();

  SynthesizeConfig(const SynthesizeConfig& from);
  SynthesizeConfig(SynthesizeConfig&& from) noexcept
    : SynthesizeConfig() {
    *this = ::std::move(from);
  }

  inline SynthesizeConfig& operator=(const SynthesizeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SynthesizeConfig& operator=(SynthesizeConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SynthesizeConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SynthesizeConfig* internal_default_instance() {
    return reinterpret_cast<const SynthesizeConfig*>(
               &_SynthesizeConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SynthesizeConfig& a, SynthesizeConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SynthesizeConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SynthesizeConfig* New() const final {
    return CreateMaybeMessage<SynthesizeConfig>(nullptr);
  }

  SynthesizeConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SynthesizeConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SynthesizeConfig& from);
  void MergeFrom(const SynthesizeConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SynthesizeConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "techmo.tts.SynthesizeConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_techmo_5ftts_2eproto);
    return ::descriptor_table_techmo_5ftts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageFieldNumber = 1,
    kAudioConfigFieldNumber = 2,
    kVoiceFieldNumber = 3,
  };
  // string language = 1;
  void clear_language();
  const std::string& language() const;
  void set_language(const std::string& value);
  void set_language(std::string&& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // .techmo.tts.AudioConfig audio_config = 2;
  bool has_audio_config() const;
  private:
  bool _internal_has_audio_config() const;
  public:
  void clear_audio_config();
  const ::techmo::tts::AudioConfig& audio_config() const;
  ::techmo::tts::AudioConfig* release_audio_config();
  ::techmo::tts::AudioConfig* mutable_audio_config();
  void set_allocated_audio_config(::techmo::tts::AudioConfig* audio_config);
  private:
  const ::techmo::tts::AudioConfig& _internal_audio_config() const;
  ::techmo::tts::AudioConfig* _internal_mutable_audio_config();
  public:

  // .techmo.tts.Voice voice = 3;
  bool has_voice() const;
  private:
  bool _internal_has_voice() const;
  public:
  void clear_voice();
  const ::techmo::tts::Voice& voice() const;
  ::techmo::tts::Voice* release_voice();
  ::techmo::tts::Voice* mutable_voice();
  void set_allocated_voice(::techmo::tts::Voice* voice);
  private:
  const ::techmo::tts::Voice& _internal_voice() const;
  ::techmo::tts::Voice* _internal_mutable_voice();
  public:

  // @@protoc_insertion_point(class_scope:techmo.tts.SynthesizeConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::techmo::tts::AudioConfig* audio_config_;
  ::techmo::tts::Voice* voice_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_techmo_5ftts_2eproto;
};
// -------------------------------------------------------------------

class AudioConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:techmo.tts.AudioConfig) */ {
 public:
  AudioConfig();
  virtual ~AudioConfig();

  AudioConfig(const AudioConfig& from);
  AudioConfig(AudioConfig&& from) noexcept
    : AudioConfig() {
    *this = ::std::move(from);
  }

  inline AudioConfig& operator=(const AudioConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioConfig& operator=(AudioConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioConfig* internal_default_instance() {
    return reinterpret_cast<const AudioConfig*>(
               &_AudioConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AudioConfig& a, AudioConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioConfig* New() const final {
    return CreateMaybeMessage<AudioConfig>(nullptr);
  }

  AudioConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioConfig& from);
  void MergeFrom(const AudioConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "techmo.tts.AudioConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_techmo_5ftts_2eproto);
    return ::descriptor_table_techmo_5ftts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioEncodingFieldNumber = 1,
    kSampleRateHertzFieldNumber = 2,
    kPitchFieldNumber = 3,
    kRangeFieldNumber = 4,
    kRateFieldNumber = 5,
    kVolumeFieldNumber = 6,
  };
  // .techmo.tts.AudioEncoding audio_encoding = 1;
  void clear_audio_encoding();
  ::techmo::tts::AudioEncoding audio_encoding() const;
  void set_audio_encoding(::techmo::tts::AudioEncoding value);
  private:
  ::techmo::tts::AudioEncoding _internal_audio_encoding() const;
  void _internal_set_audio_encoding(::techmo::tts::AudioEncoding value);
  public:

  // int32 sample_rate_hertz = 2;
  void clear_sample_rate_hertz();
  ::PROTOBUF_NAMESPACE_ID::int32 sample_rate_hertz() const;
  void set_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sample_rate_hertz() const;
  void _internal_set_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float pitch = 3;
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // float range = 4;
  void clear_range();
  float range() const;
  void set_range(float value);
  private:
  float _internal_range() const;
  void _internal_set_range(float value);
  public:

  // float rate = 5;
  void clear_rate();
  float rate() const;
  void set_rate(float value);
  private:
  float _internal_rate() const;
  void _internal_set_rate(float value);
  public:

  // float volume = 6;
  void clear_volume();
  float volume() const;
  void set_volume(float value);
  private:
  float _internal_volume() const;
  void _internal_set_volume(float value);
  public:

  // @@protoc_insertion_point(class_scope:techmo.tts.AudioConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int audio_encoding_;
  ::PROTOBUF_NAMESPACE_ID::int32 sample_rate_hertz_;
  float pitch_;
  float range_;
  float rate_;
  float volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_techmo_5ftts_2eproto;
};
// -------------------------------------------------------------------

class Voice :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:techmo.tts.Voice) */ {
 public:
  Voice();
  virtual ~Voice();

  Voice(const Voice& from);
  Voice(Voice&& from) noexcept
    : Voice() {
    *this = ::std::move(from);
  }

  inline Voice& operator=(const Voice& from) {
    CopyFrom(from);
    return *this;
  }
  inline Voice& operator=(Voice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Voice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Voice* internal_default_instance() {
    return reinterpret_cast<const Voice*>(
               &_Voice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Voice& a, Voice& b) {
    a.Swap(&b);
  }
  inline void Swap(Voice* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Voice* New() const final {
    return CreateMaybeMessage<Voice>(nullptr);
  }

  Voice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Voice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Voice& from);
  void MergeFrom(const Voice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Voice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "techmo.tts.Voice";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_techmo_5ftts_2eproto);
    return ::descriptor_table_techmo_5ftts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kGenderFieldNumber = 2,
    kAgeFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .techmo.tts.Gender gender = 2;
  void clear_gender();
  ::techmo::tts::Gender gender() const;
  void set_gender(::techmo::tts::Gender value);
  private:
  ::techmo::tts::Gender _internal_gender() const;
  void _internal_set_gender(::techmo::tts::Gender value);
  public:

  // .techmo.tts.Age age = 3;
  void clear_age();
  ::techmo::tts::Age age() const;
  void set_age(::techmo::tts::Age value);
  private:
  ::techmo::tts::Age _internal_age() const;
  void _internal_set_age(::techmo::tts::Age value);
  public:

  // @@protoc_insertion_point(class_scope:techmo.tts.Voice)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int gender_;
  int age_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_techmo_5ftts_2eproto;
};
// -------------------------------------------------------------------

class VoiceInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:techmo.tts.VoiceInfo) */ {
 public:
  VoiceInfo();
  virtual ~VoiceInfo();

  VoiceInfo(const VoiceInfo& from);
  VoiceInfo(VoiceInfo&& from) noexcept
    : VoiceInfo() {
    *this = ::std::move(from);
  }

  inline VoiceInfo& operator=(const VoiceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoiceInfo& operator=(VoiceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VoiceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VoiceInfo* internal_default_instance() {
    return reinterpret_cast<const VoiceInfo*>(
               &_VoiceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(VoiceInfo& a, VoiceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VoiceInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VoiceInfo* New() const final {
    return CreateMaybeMessage<VoiceInfo>(nullptr);
  }

  VoiceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VoiceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VoiceInfo& from);
  void MergeFrom(const VoiceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoiceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "techmo.tts.VoiceInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_techmo_5ftts_2eproto);
    return ::descriptor_table_techmo_5ftts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSupportedLanguagesFieldNumber = 1,
    kVoiceFieldNumber = 2,
  };
  // repeated string supported_languages = 1;
  int supported_languages_size() const;
  private:
  int _internal_supported_languages_size() const;
  public:
  void clear_supported_languages();
  const std::string& supported_languages(int index) const;
  std::string* mutable_supported_languages(int index);
  void set_supported_languages(int index, const std::string& value);
  void set_supported_languages(int index, std::string&& value);
  void set_supported_languages(int index, const char* value);
  void set_supported_languages(int index, const char* value, size_t size);
  std::string* add_supported_languages();
  void add_supported_languages(const std::string& value);
  void add_supported_languages(std::string&& value);
  void add_supported_languages(const char* value);
  void add_supported_languages(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& supported_languages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_supported_languages();
  private:
  const std::string& _internal_supported_languages(int index) const;
  std::string* _internal_add_supported_languages();
  public:

  // .techmo.tts.Voice voice = 2;
  bool has_voice() const;
  private:
  bool _internal_has_voice() const;
  public:
  void clear_voice();
  const ::techmo::tts::Voice& voice() const;
  ::techmo::tts::Voice* release_voice();
  ::techmo::tts::Voice* mutable_voice();
  void set_allocated_voice(::techmo::tts::Voice* voice);
  private:
  const ::techmo::tts::Voice& _internal_voice() const;
  ::techmo::tts::Voice* _internal_mutable_voice();
  public:

  // @@protoc_insertion_point(class_scope:techmo.tts.VoiceInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> supported_languages_;
  ::techmo::tts::Voice* voice_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_techmo_5ftts_2eproto;
};
// -------------------------------------------------------------------

class SynthesizeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:techmo.tts.SynthesizeResponse) */ {
 public:
  SynthesizeResponse();
  virtual ~SynthesizeResponse();

  SynthesizeResponse(const SynthesizeResponse& from);
  SynthesizeResponse(SynthesizeResponse&& from) noexcept
    : SynthesizeResponse() {
    *this = ::std::move(from);
  }

  inline SynthesizeResponse& operator=(const SynthesizeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SynthesizeResponse& operator=(SynthesizeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SynthesizeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SynthesizeResponse* internal_default_instance() {
    return reinterpret_cast<const SynthesizeResponse*>(
               &_SynthesizeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SynthesizeResponse& a, SynthesizeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SynthesizeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SynthesizeResponse* New() const final {
    return CreateMaybeMessage<SynthesizeResponse>(nullptr);
  }

  SynthesizeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SynthesizeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SynthesizeResponse& from);
  void MergeFrom(const SynthesizeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SynthesizeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "techmo.tts.SynthesizeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_techmo_5ftts_2eproto);
    return ::descriptor_table_techmo_5ftts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // .techmo.tts.AudioData audio = 1;
  bool has_audio() const;
  private:
  bool _internal_has_audio() const;
  public:
  void clear_audio();
  const ::techmo::tts::AudioData& audio() const;
  ::techmo::tts::AudioData* release_audio();
  ::techmo::tts::AudioData* mutable_audio();
  void set_allocated_audio(::techmo::tts::AudioData* audio);
  private:
  const ::techmo::tts::AudioData& _internal_audio() const;
  ::techmo::tts::AudioData* _internal_mutable_audio();
  public:

  // .techmo.tts.Error error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::techmo::tts::Error& error() const;
  ::techmo::tts::Error* release_error();
  ::techmo::tts::Error* mutable_error();
  void set_allocated_error(::techmo::tts::Error* error);
  private:
  const ::techmo::tts::Error& _internal_error() const;
  ::techmo::tts::Error* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:techmo.tts.SynthesizeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::techmo::tts::AudioData* audio_;
  ::techmo::tts::Error* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_techmo_5ftts_2eproto;
};
// -------------------------------------------------------------------

class AudioData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:techmo.tts.AudioData) */ {
 public:
  AudioData();
  virtual ~AudioData();

  AudioData(const AudioData& from);
  AudioData(AudioData&& from) noexcept
    : AudioData() {
    *this = ::std::move(from);
  }

  inline AudioData& operator=(const AudioData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioData& operator=(AudioData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioData* internal_default_instance() {
    return reinterpret_cast<const AudioData*>(
               &_AudioData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AudioData& a, AudioData& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioData* New() const final {
    return CreateMaybeMessage<AudioData>(nullptr);
  }

  AudioData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioData& from);
  void MergeFrom(const AudioData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "techmo.tts.AudioData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_techmo_5ftts_2eproto);
    return ::descriptor_table_techmo_5ftts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kSampleRateHertzFieldNumber = 1,
  };
  // bytes content = 2;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int32 sample_rate_hertz = 1;
  void clear_sample_rate_hertz();
  ::PROTOBUF_NAMESPACE_ID::int32 sample_rate_hertz() const;
  void set_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sample_rate_hertz() const;
  void _internal_set_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:techmo.tts.AudioData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::int32 sample_rate_hertz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_techmo_5ftts_2eproto;
};
// -------------------------------------------------------------------

class PutLexiconRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:techmo.tts.PutLexiconRequest) */ {
 public:
  PutLexiconRequest();
  virtual ~PutLexiconRequest();

  PutLexiconRequest(const PutLexiconRequest& from);
  PutLexiconRequest(PutLexiconRequest&& from) noexcept
    : PutLexiconRequest() {
    *this = ::std::move(from);
  }

  inline PutLexiconRequest& operator=(const PutLexiconRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutLexiconRequest& operator=(PutLexiconRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutLexiconRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutLexiconRequest* internal_default_instance() {
    return reinterpret_cast<const PutLexiconRequest*>(
               &_PutLexiconRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PutLexiconRequest& a, PutLexiconRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PutLexiconRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutLexiconRequest* New() const final {
    return CreateMaybeMessage<PutLexiconRequest>(nullptr);
  }

  PutLexiconRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutLexiconRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutLexiconRequest& from);
  void MergeFrom(const PutLexiconRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutLexiconRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "techmo.tts.PutLexiconRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_techmo_5ftts_2eproto);
    return ::descriptor_table_techmo_5ftts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kContentFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string content = 2;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:techmo.tts.PutLexiconRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_techmo_5ftts_2eproto;
};
// -------------------------------------------------------------------

class PutLexiconResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:techmo.tts.PutLexiconResponse) */ {
 public:
  PutLexiconResponse();
  virtual ~PutLexiconResponse();

  PutLexiconResponse(const PutLexiconResponse& from);
  PutLexiconResponse(PutLexiconResponse&& from) noexcept
    : PutLexiconResponse() {
    *this = ::std::move(from);
  }

  inline PutLexiconResponse& operator=(const PutLexiconResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutLexiconResponse& operator=(PutLexiconResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutLexiconResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutLexiconResponse* internal_default_instance() {
    return reinterpret_cast<const PutLexiconResponse*>(
               &_PutLexiconResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PutLexiconResponse& a, PutLexiconResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PutLexiconResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutLexiconResponse* New() const final {
    return CreateMaybeMessage<PutLexiconResponse>(nullptr);
  }

  PutLexiconResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutLexiconResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutLexiconResponse& from);
  void MergeFrom(const PutLexiconResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutLexiconResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "techmo.tts.PutLexiconResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_techmo_5ftts_2eproto);
    return ::descriptor_table_techmo_5ftts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // .techmo.tts.Error error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::techmo::tts::Error& error() const;
  ::techmo::tts::Error* release_error();
  ::techmo::tts::Error* mutable_error();
  void set_allocated_error(::techmo::tts::Error* error);
  private:
  const ::techmo::tts::Error& _internal_error() const;
  ::techmo::tts::Error* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:techmo.tts.PutLexiconResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::techmo::tts::Error* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_techmo_5ftts_2eproto;
};
// -------------------------------------------------------------------

class DeleteLexiconRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:techmo.tts.DeleteLexiconRequest) */ {
 public:
  DeleteLexiconRequest();
  virtual ~DeleteLexiconRequest();

  DeleteLexiconRequest(const DeleteLexiconRequest& from);
  DeleteLexiconRequest(DeleteLexiconRequest&& from) noexcept
    : DeleteLexiconRequest() {
    *this = ::std::move(from);
  }

  inline DeleteLexiconRequest& operator=(const DeleteLexiconRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteLexiconRequest& operator=(DeleteLexiconRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteLexiconRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteLexiconRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteLexiconRequest*>(
               &_DeleteLexiconRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DeleteLexiconRequest& a, DeleteLexiconRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteLexiconRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteLexiconRequest* New() const final {
    return CreateMaybeMessage<DeleteLexiconRequest>(nullptr);
  }

  DeleteLexiconRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteLexiconRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteLexiconRequest& from);
  void MergeFrom(const DeleteLexiconRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteLexiconRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "techmo.tts.DeleteLexiconRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_techmo_5ftts_2eproto);
    return ::descriptor_table_techmo_5ftts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:techmo.tts.DeleteLexiconRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_techmo_5ftts_2eproto;
};
// -------------------------------------------------------------------

class DeleteLexiconResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:techmo.tts.DeleteLexiconResponse) */ {
 public:
  DeleteLexiconResponse();
  virtual ~DeleteLexiconResponse();

  DeleteLexiconResponse(const DeleteLexiconResponse& from);
  DeleteLexiconResponse(DeleteLexiconResponse&& from) noexcept
    : DeleteLexiconResponse() {
    *this = ::std::move(from);
  }

  inline DeleteLexiconResponse& operator=(const DeleteLexiconResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteLexiconResponse& operator=(DeleteLexiconResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteLexiconResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteLexiconResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteLexiconResponse*>(
               &_DeleteLexiconResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DeleteLexiconResponse& a, DeleteLexiconResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteLexiconResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteLexiconResponse* New() const final {
    return CreateMaybeMessage<DeleteLexiconResponse>(nullptr);
  }

  DeleteLexiconResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteLexiconResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteLexiconResponse& from);
  void MergeFrom(const DeleteLexiconResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteLexiconResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "techmo.tts.DeleteLexiconResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_techmo_5ftts_2eproto);
    return ::descriptor_table_techmo_5ftts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // .techmo.tts.Error error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::techmo::tts::Error& error() const;
  ::techmo::tts::Error* release_error();
  ::techmo::tts::Error* mutable_error();
  void set_allocated_error(::techmo::tts::Error* error);
  private:
  const ::techmo::tts::Error& _internal_error() const;
  ::techmo::tts::Error* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:techmo.tts.DeleteLexiconResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::techmo::tts::Error* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_techmo_5ftts_2eproto;
};
// -------------------------------------------------------------------

class GetLexiconRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:techmo.tts.GetLexiconRequest) */ {
 public:
  GetLexiconRequest();
  virtual ~GetLexiconRequest();

  GetLexiconRequest(const GetLexiconRequest& from);
  GetLexiconRequest(GetLexiconRequest&& from) noexcept
    : GetLexiconRequest() {
    *this = ::std::move(from);
  }

  inline GetLexiconRequest& operator=(const GetLexiconRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLexiconRequest& operator=(GetLexiconRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLexiconRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLexiconRequest* internal_default_instance() {
    return reinterpret_cast<const GetLexiconRequest*>(
               &_GetLexiconRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetLexiconRequest& a, GetLexiconRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLexiconRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLexiconRequest* New() const final {
    return CreateMaybeMessage<GetLexiconRequest>(nullptr);
  }

  GetLexiconRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLexiconRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLexiconRequest& from);
  void MergeFrom(const GetLexiconRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLexiconRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "techmo.tts.GetLexiconRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_techmo_5ftts_2eproto);
    return ::descriptor_table_techmo_5ftts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:techmo.tts.GetLexiconRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_techmo_5ftts_2eproto;
};
// -------------------------------------------------------------------

class GetLexiconResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:techmo.tts.GetLexiconResponse) */ {
 public:
  GetLexiconResponse();
  virtual ~GetLexiconResponse();

  GetLexiconResponse(const GetLexiconResponse& from);
  GetLexiconResponse(GetLexiconResponse&& from) noexcept
    : GetLexiconResponse() {
    *this = ::std::move(from);
  }

  inline GetLexiconResponse& operator=(const GetLexiconResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLexiconResponse& operator=(GetLexiconResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLexiconResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLexiconResponse* internal_default_instance() {
    return reinterpret_cast<const GetLexiconResponse*>(
               &_GetLexiconResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetLexiconResponse& a, GetLexiconResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLexiconResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLexiconResponse* New() const final {
    return CreateMaybeMessage<GetLexiconResponse>(nullptr);
  }

  GetLexiconResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLexiconResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLexiconResponse& from);
  void MergeFrom(const GetLexiconResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLexiconResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "techmo.tts.GetLexiconResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_techmo_5ftts_2eproto);
    return ::descriptor_table_techmo_5ftts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string content = 1;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // .techmo.tts.Error error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::techmo::tts::Error& error() const;
  ::techmo::tts::Error* release_error();
  ::techmo::tts::Error* mutable_error();
  void set_allocated_error(::techmo::tts::Error* error);
  private:
  const ::techmo::tts::Error& _internal_error() const;
  ::techmo::tts::Error* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:techmo.tts.GetLexiconResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::techmo::tts::Error* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_techmo_5ftts_2eproto;
};
// -------------------------------------------------------------------

class ListLexiconsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:techmo.tts.ListLexiconsRequest) */ {
 public:
  ListLexiconsRequest();
  virtual ~ListLexiconsRequest();

  ListLexiconsRequest(const ListLexiconsRequest& from);
  ListLexiconsRequest(ListLexiconsRequest&& from) noexcept
    : ListLexiconsRequest() {
    *this = ::std::move(from);
  }

  inline ListLexiconsRequest& operator=(const ListLexiconsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListLexiconsRequest& operator=(ListLexiconsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListLexiconsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListLexiconsRequest* internal_default_instance() {
    return reinterpret_cast<const ListLexiconsRequest*>(
               &_ListLexiconsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ListLexiconsRequest& a, ListLexiconsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListLexiconsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListLexiconsRequest* New() const final {
    return CreateMaybeMessage<ListLexiconsRequest>(nullptr);
  }

  ListLexiconsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListLexiconsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListLexiconsRequest& from);
  void MergeFrom(const ListLexiconsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListLexiconsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "techmo.tts.ListLexiconsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_techmo_5ftts_2eproto);
    return ::descriptor_table_techmo_5ftts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageFieldNumber = 1,
  };
  // string language = 1;
  void clear_language();
  const std::string& language() const;
  void set_language(const std::string& value);
  void set_language(std::string&& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // @@protoc_insertion_point(class_scope:techmo.tts.ListLexiconsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_techmo_5ftts_2eproto;
};
// -------------------------------------------------------------------

class ListLexiconsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:techmo.tts.ListLexiconsResponse) */ {
 public:
  ListLexiconsResponse();
  virtual ~ListLexiconsResponse();

  ListLexiconsResponse(const ListLexiconsResponse& from);
  ListLexiconsResponse(ListLexiconsResponse&& from) noexcept
    : ListLexiconsResponse() {
    *this = ::std::move(from);
  }

  inline ListLexiconsResponse& operator=(const ListLexiconsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListLexiconsResponse& operator=(ListLexiconsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListLexiconsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListLexiconsResponse* internal_default_instance() {
    return reinterpret_cast<const ListLexiconsResponse*>(
               &_ListLexiconsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ListLexiconsResponse& a, ListLexiconsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListLexiconsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListLexiconsResponse* New() const final {
    return CreateMaybeMessage<ListLexiconsResponse>(nullptr);
  }

  ListLexiconsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListLexiconsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListLexiconsResponse& from);
  void MergeFrom(const ListLexiconsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListLexiconsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "techmo.tts.ListLexiconsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_techmo_5ftts_2eproto);
    return ::descriptor_table_techmo_5ftts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 1,
  };
  // repeated string names = 1;
  int names_size() const;
  private:
  int _internal_names_size() const;
  public:
  void clear_names();
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_names();
  private:
  const std::string& _internal_names(int index) const;
  std::string* _internal_add_names();
  public:

  // @@protoc_insertion_point(class_scope:techmo.tts.ListLexiconsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> names_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_techmo_5ftts_2eproto;
};
// -------------------------------------------------------------------

class Error :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:techmo.tts.Error) */ {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error& operator=(Error&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Error& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }
  inline void Swap(Error* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Error* New() const final {
    return CreateMaybeMessage<Error>(nullptr);
  }

  Error* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Error>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "techmo.tts.Error";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_techmo_5ftts_2eproto);
    return ::descriptor_table_techmo_5ftts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .techmo.tts.ErrorCode code = 1;
  void clear_code();
  ::techmo::tts::ErrorCode code() const;
  void set_code(::techmo::tts::ErrorCode value);
  private:
  ::techmo::tts::ErrorCode _internal_code() const;
  void _internal_set_code(::techmo::tts::ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:techmo.tts.Error)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  int code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_techmo_5ftts_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ListVoicesRequest

// string language = 1;
inline void ListVoicesRequest::clear_language() {
  language_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListVoicesRequest::language() const {
  // @@protoc_insertion_point(field_get:techmo.tts.ListVoicesRequest.language)
  return _internal_language();
}
inline void ListVoicesRequest::set_language(const std::string& value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:techmo.tts.ListVoicesRequest.language)
}
inline std::string* ListVoicesRequest::mutable_language() {
  // @@protoc_insertion_point(field_mutable:techmo.tts.ListVoicesRequest.language)
  return _internal_mutable_language();
}
inline const std::string& ListVoicesRequest::_internal_language() const {
  return language_.GetNoArena();
}
inline void ListVoicesRequest::_internal_set_language(const std::string& value) {
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListVoicesRequest::set_language(std::string&& value) {
  
  language_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.tts.ListVoicesRequest.language)
}
inline void ListVoicesRequest::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.tts.ListVoicesRequest.language)
}
inline void ListVoicesRequest::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.tts.ListVoicesRequest.language)
}
inline std::string* ListVoicesRequest::_internal_mutable_language() {
  
  return language_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListVoicesRequest::release_language() {
  // @@protoc_insertion_point(field_release:techmo.tts.ListVoicesRequest.language)
  
  return language_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListVoicesRequest::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:techmo.tts.ListVoicesRequest.language)
}

// -------------------------------------------------------------------

// ListVoicesResponse

// repeated .techmo.tts.VoiceInfo voices = 1;
inline int ListVoicesResponse::_internal_voices_size() const {
  return voices_.size();
}
inline int ListVoicesResponse::voices_size() const {
  return _internal_voices_size();
}
inline void ListVoicesResponse::clear_voices() {
  voices_.Clear();
}
inline ::techmo::tts::VoiceInfo* ListVoicesResponse::mutable_voices(int index) {
  // @@protoc_insertion_point(field_mutable:techmo.tts.ListVoicesResponse.voices)
  return voices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::techmo::tts::VoiceInfo >*
ListVoicesResponse::mutable_voices() {
  // @@protoc_insertion_point(field_mutable_list:techmo.tts.ListVoicesResponse.voices)
  return &voices_;
}
inline const ::techmo::tts::VoiceInfo& ListVoicesResponse::_internal_voices(int index) const {
  return voices_.Get(index);
}
inline const ::techmo::tts::VoiceInfo& ListVoicesResponse::voices(int index) const {
  // @@protoc_insertion_point(field_get:techmo.tts.ListVoicesResponse.voices)
  return _internal_voices(index);
}
inline ::techmo::tts::VoiceInfo* ListVoicesResponse::_internal_add_voices() {
  return voices_.Add();
}
inline ::techmo::tts::VoiceInfo* ListVoicesResponse::add_voices() {
  // @@protoc_insertion_point(field_add:techmo.tts.ListVoicesResponse.voices)
  return _internal_add_voices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::techmo::tts::VoiceInfo >&
ListVoicesResponse::voices() const {
  // @@protoc_insertion_point(field_list:techmo.tts.ListVoicesResponse.voices)
  return voices_;
}

// -------------------------------------------------------------------

// SynthesizeRequest

// string text = 1;
inline void SynthesizeRequest::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SynthesizeRequest::text() const {
  // @@protoc_insertion_point(field_get:techmo.tts.SynthesizeRequest.text)
  return _internal_text();
}
inline void SynthesizeRequest::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:techmo.tts.SynthesizeRequest.text)
}
inline std::string* SynthesizeRequest::mutable_text() {
  // @@protoc_insertion_point(field_mutable:techmo.tts.SynthesizeRequest.text)
  return _internal_mutable_text();
}
inline const std::string& SynthesizeRequest::_internal_text() const {
  return text_.GetNoArena();
}
inline void SynthesizeRequest::_internal_set_text(const std::string& value) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SynthesizeRequest::set_text(std::string&& value) {
  
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.tts.SynthesizeRequest.text)
}
inline void SynthesizeRequest::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.tts.SynthesizeRequest.text)
}
inline void SynthesizeRequest::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.tts.SynthesizeRequest.text)
}
inline std::string* SynthesizeRequest::_internal_mutable_text() {
  
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SynthesizeRequest::release_text() {
  // @@protoc_insertion_point(field_release:techmo.tts.SynthesizeRequest.text)
  
  return text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SynthesizeRequest::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:techmo.tts.SynthesizeRequest.text)
}

// .techmo.tts.SynthesizeConfig config = 2;
inline bool SynthesizeRequest::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool SynthesizeRequest::has_config() const {
  return _internal_has_config();
}
inline void SynthesizeRequest::clear_config() {
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::techmo::tts::SynthesizeConfig& SynthesizeRequest::_internal_config() const {
  const ::techmo::tts::SynthesizeConfig* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::techmo::tts::SynthesizeConfig*>(
      &::techmo::tts::_SynthesizeConfig_default_instance_);
}
inline const ::techmo::tts::SynthesizeConfig& SynthesizeRequest::config() const {
  // @@protoc_insertion_point(field_get:techmo.tts.SynthesizeRequest.config)
  return _internal_config();
}
inline ::techmo::tts::SynthesizeConfig* SynthesizeRequest::release_config() {
  // @@protoc_insertion_point(field_release:techmo.tts.SynthesizeRequest.config)
  
  ::techmo::tts::SynthesizeConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::techmo::tts::SynthesizeConfig* SynthesizeRequest::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::techmo::tts::SynthesizeConfig>(GetArenaNoVirtual());
    config_ = p;
  }
  return config_;
}
inline ::techmo::tts::SynthesizeConfig* SynthesizeRequest::mutable_config() {
  // @@protoc_insertion_point(field_mutable:techmo.tts.SynthesizeRequest.config)
  return _internal_mutable_config();
}
inline void SynthesizeRequest::set_allocated_config(::techmo::tts::SynthesizeConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:techmo.tts.SynthesizeRequest.config)
}

// -------------------------------------------------------------------

// SynthesizeConfig

// string language = 1;
inline void SynthesizeConfig::clear_language() {
  language_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SynthesizeConfig::language() const {
  // @@protoc_insertion_point(field_get:techmo.tts.SynthesizeConfig.language)
  return _internal_language();
}
inline void SynthesizeConfig::set_language(const std::string& value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:techmo.tts.SynthesizeConfig.language)
}
inline std::string* SynthesizeConfig::mutable_language() {
  // @@protoc_insertion_point(field_mutable:techmo.tts.SynthesizeConfig.language)
  return _internal_mutable_language();
}
inline const std::string& SynthesizeConfig::_internal_language() const {
  return language_.GetNoArena();
}
inline void SynthesizeConfig::_internal_set_language(const std::string& value) {
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SynthesizeConfig::set_language(std::string&& value) {
  
  language_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.tts.SynthesizeConfig.language)
}
inline void SynthesizeConfig::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.tts.SynthesizeConfig.language)
}
inline void SynthesizeConfig::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.tts.SynthesizeConfig.language)
}
inline std::string* SynthesizeConfig::_internal_mutable_language() {
  
  return language_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SynthesizeConfig::release_language() {
  // @@protoc_insertion_point(field_release:techmo.tts.SynthesizeConfig.language)
  
  return language_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SynthesizeConfig::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:techmo.tts.SynthesizeConfig.language)
}

// .techmo.tts.AudioConfig audio_config = 2;
inline bool SynthesizeConfig::_internal_has_audio_config() const {
  return this != internal_default_instance() && audio_config_ != nullptr;
}
inline bool SynthesizeConfig::has_audio_config() const {
  return _internal_has_audio_config();
}
inline void SynthesizeConfig::clear_audio_config() {
  if (GetArenaNoVirtual() == nullptr && audio_config_ != nullptr) {
    delete audio_config_;
  }
  audio_config_ = nullptr;
}
inline const ::techmo::tts::AudioConfig& SynthesizeConfig::_internal_audio_config() const {
  const ::techmo::tts::AudioConfig* p = audio_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::techmo::tts::AudioConfig*>(
      &::techmo::tts::_AudioConfig_default_instance_);
}
inline const ::techmo::tts::AudioConfig& SynthesizeConfig::audio_config() const {
  // @@protoc_insertion_point(field_get:techmo.tts.SynthesizeConfig.audio_config)
  return _internal_audio_config();
}
inline ::techmo::tts::AudioConfig* SynthesizeConfig::release_audio_config() {
  // @@protoc_insertion_point(field_release:techmo.tts.SynthesizeConfig.audio_config)
  
  ::techmo::tts::AudioConfig* temp = audio_config_;
  audio_config_ = nullptr;
  return temp;
}
inline ::techmo::tts::AudioConfig* SynthesizeConfig::_internal_mutable_audio_config() {
  
  if (audio_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::techmo::tts::AudioConfig>(GetArenaNoVirtual());
    audio_config_ = p;
  }
  return audio_config_;
}
inline ::techmo::tts::AudioConfig* SynthesizeConfig::mutable_audio_config() {
  // @@protoc_insertion_point(field_mutable:techmo.tts.SynthesizeConfig.audio_config)
  return _internal_mutable_audio_config();
}
inline void SynthesizeConfig::set_allocated_audio_config(::techmo::tts::AudioConfig* audio_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete audio_config_;
  }
  if (audio_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      audio_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_config, submessage_arena);
    }
    
  } else {
    
  }
  audio_config_ = audio_config;
  // @@protoc_insertion_point(field_set_allocated:techmo.tts.SynthesizeConfig.audio_config)
}

// .techmo.tts.Voice voice = 3;
inline bool SynthesizeConfig::_internal_has_voice() const {
  return this != internal_default_instance() && voice_ != nullptr;
}
inline bool SynthesizeConfig::has_voice() const {
  return _internal_has_voice();
}
inline void SynthesizeConfig::clear_voice() {
  if (GetArenaNoVirtual() == nullptr && voice_ != nullptr) {
    delete voice_;
  }
  voice_ = nullptr;
}
inline const ::techmo::tts::Voice& SynthesizeConfig::_internal_voice() const {
  const ::techmo::tts::Voice* p = voice_;
  return p != nullptr ? *p : *reinterpret_cast<const ::techmo::tts::Voice*>(
      &::techmo::tts::_Voice_default_instance_);
}
inline const ::techmo::tts::Voice& SynthesizeConfig::voice() const {
  // @@protoc_insertion_point(field_get:techmo.tts.SynthesizeConfig.voice)
  return _internal_voice();
}
inline ::techmo::tts::Voice* SynthesizeConfig::release_voice() {
  // @@protoc_insertion_point(field_release:techmo.tts.SynthesizeConfig.voice)
  
  ::techmo::tts::Voice* temp = voice_;
  voice_ = nullptr;
  return temp;
}
inline ::techmo::tts::Voice* SynthesizeConfig::_internal_mutable_voice() {
  
  if (voice_ == nullptr) {
    auto* p = CreateMaybeMessage<::techmo::tts::Voice>(GetArenaNoVirtual());
    voice_ = p;
  }
  return voice_;
}
inline ::techmo::tts::Voice* SynthesizeConfig::mutable_voice() {
  // @@protoc_insertion_point(field_mutable:techmo.tts.SynthesizeConfig.voice)
  return _internal_mutable_voice();
}
inline void SynthesizeConfig::set_allocated_voice(::techmo::tts::Voice* voice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete voice_;
  }
  if (voice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      voice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voice, submessage_arena);
    }
    
  } else {
    
  }
  voice_ = voice;
  // @@protoc_insertion_point(field_set_allocated:techmo.tts.SynthesizeConfig.voice)
}

// -------------------------------------------------------------------

// AudioConfig

// .techmo.tts.AudioEncoding audio_encoding = 1;
inline void AudioConfig::clear_audio_encoding() {
  audio_encoding_ = 0;
}
inline ::techmo::tts::AudioEncoding AudioConfig::_internal_audio_encoding() const {
  return static_cast< ::techmo::tts::AudioEncoding >(audio_encoding_);
}
inline ::techmo::tts::AudioEncoding AudioConfig::audio_encoding() const {
  // @@protoc_insertion_point(field_get:techmo.tts.AudioConfig.audio_encoding)
  return _internal_audio_encoding();
}
inline void AudioConfig::_internal_set_audio_encoding(::techmo::tts::AudioEncoding value) {
  
  audio_encoding_ = value;
}
inline void AudioConfig::set_audio_encoding(::techmo::tts::AudioEncoding value) {
  _internal_set_audio_encoding(value);
  // @@protoc_insertion_point(field_set:techmo.tts.AudioConfig.audio_encoding)
}

// int32 sample_rate_hertz = 2;
inline void AudioConfig::clear_sample_rate_hertz() {
  sample_rate_hertz_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioConfig::_internal_sample_rate_hertz() const {
  return sample_rate_hertz_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioConfig::sample_rate_hertz() const {
  // @@protoc_insertion_point(field_get:techmo.tts.AudioConfig.sample_rate_hertz)
  return _internal_sample_rate_hertz();
}
inline void AudioConfig::_internal_set_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sample_rate_hertz_ = value;
}
inline void AudioConfig::set_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sample_rate_hertz(value);
  // @@protoc_insertion_point(field_set:techmo.tts.AudioConfig.sample_rate_hertz)
}

// float pitch = 3;
inline void AudioConfig::clear_pitch() {
  pitch_ = 0;
}
inline float AudioConfig::_internal_pitch() const {
  return pitch_;
}
inline float AudioConfig::pitch() const {
  // @@protoc_insertion_point(field_get:techmo.tts.AudioConfig.pitch)
  return _internal_pitch();
}
inline void AudioConfig::_internal_set_pitch(float value) {
  
  pitch_ = value;
}
inline void AudioConfig::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:techmo.tts.AudioConfig.pitch)
}

// float range = 4;
inline void AudioConfig::clear_range() {
  range_ = 0;
}
inline float AudioConfig::_internal_range() const {
  return range_;
}
inline float AudioConfig::range() const {
  // @@protoc_insertion_point(field_get:techmo.tts.AudioConfig.range)
  return _internal_range();
}
inline void AudioConfig::_internal_set_range(float value) {
  
  range_ = value;
}
inline void AudioConfig::set_range(float value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:techmo.tts.AudioConfig.range)
}

// float rate = 5;
inline void AudioConfig::clear_rate() {
  rate_ = 0;
}
inline float AudioConfig::_internal_rate() const {
  return rate_;
}
inline float AudioConfig::rate() const {
  // @@protoc_insertion_point(field_get:techmo.tts.AudioConfig.rate)
  return _internal_rate();
}
inline void AudioConfig::_internal_set_rate(float value) {
  
  rate_ = value;
}
inline void AudioConfig::set_rate(float value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:techmo.tts.AudioConfig.rate)
}

// float volume = 6;
inline void AudioConfig::clear_volume() {
  volume_ = 0;
}
inline float AudioConfig::_internal_volume() const {
  return volume_;
}
inline float AudioConfig::volume() const {
  // @@protoc_insertion_point(field_get:techmo.tts.AudioConfig.volume)
  return _internal_volume();
}
inline void AudioConfig::_internal_set_volume(float value) {
  
  volume_ = value;
}
inline void AudioConfig::set_volume(float value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:techmo.tts.AudioConfig.volume)
}

// -------------------------------------------------------------------

// Voice

// string name = 1;
inline void Voice::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Voice::name() const {
  // @@protoc_insertion_point(field_get:techmo.tts.Voice.name)
  return _internal_name();
}
inline void Voice::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:techmo.tts.Voice.name)
}
inline std::string* Voice::mutable_name() {
  // @@protoc_insertion_point(field_mutable:techmo.tts.Voice.name)
  return _internal_mutable_name();
}
inline const std::string& Voice::_internal_name() const {
  return name_.GetNoArena();
}
inline void Voice::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Voice::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.tts.Voice.name)
}
inline void Voice::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.tts.Voice.name)
}
inline void Voice::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.tts.Voice.name)
}
inline std::string* Voice::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Voice::release_name() {
  // @@protoc_insertion_point(field_release:techmo.tts.Voice.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Voice::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:techmo.tts.Voice.name)
}

// .techmo.tts.Gender gender = 2;
inline void Voice::clear_gender() {
  gender_ = 0;
}
inline ::techmo::tts::Gender Voice::_internal_gender() const {
  return static_cast< ::techmo::tts::Gender >(gender_);
}
inline ::techmo::tts::Gender Voice::gender() const {
  // @@protoc_insertion_point(field_get:techmo.tts.Voice.gender)
  return _internal_gender();
}
inline void Voice::_internal_set_gender(::techmo::tts::Gender value) {
  
  gender_ = value;
}
inline void Voice::set_gender(::techmo::tts::Gender value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:techmo.tts.Voice.gender)
}

// .techmo.tts.Age age = 3;
inline void Voice::clear_age() {
  age_ = 0;
}
inline ::techmo::tts::Age Voice::_internal_age() const {
  return static_cast< ::techmo::tts::Age >(age_);
}
inline ::techmo::tts::Age Voice::age() const {
  // @@protoc_insertion_point(field_get:techmo.tts.Voice.age)
  return _internal_age();
}
inline void Voice::_internal_set_age(::techmo::tts::Age value) {
  
  age_ = value;
}
inline void Voice::set_age(::techmo::tts::Age value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:techmo.tts.Voice.age)
}

// -------------------------------------------------------------------

// VoiceInfo

// repeated string supported_languages = 1;
inline int VoiceInfo::_internal_supported_languages_size() const {
  return supported_languages_.size();
}
inline int VoiceInfo::supported_languages_size() const {
  return _internal_supported_languages_size();
}
inline void VoiceInfo::clear_supported_languages() {
  supported_languages_.Clear();
}
inline std::string* VoiceInfo::add_supported_languages() {
  // @@protoc_insertion_point(field_add_mutable:techmo.tts.VoiceInfo.supported_languages)
  return _internal_add_supported_languages();
}
inline const std::string& VoiceInfo::_internal_supported_languages(int index) const {
  return supported_languages_.Get(index);
}
inline const std::string& VoiceInfo::supported_languages(int index) const {
  // @@protoc_insertion_point(field_get:techmo.tts.VoiceInfo.supported_languages)
  return _internal_supported_languages(index);
}
inline std::string* VoiceInfo::mutable_supported_languages(int index) {
  // @@protoc_insertion_point(field_mutable:techmo.tts.VoiceInfo.supported_languages)
  return supported_languages_.Mutable(index);
}
inline void VoiceInfo::set_supported_languages(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:techmo.tts.VoiceInfo.supported_languages)
  supported_languages_.Mutable(index)->assign(value);
}
inline void VoiceInfo::set_supported_languages(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:techmo.tts.VoiceInfo.supported_languages)
  supported_languages_.Mutable(index)->assign(std::move(value));
}
inline void VoiceInfo::set_supported_languages(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  supported_languages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:techmo.tts.VoiceInfo.supported_languages)
}
inline void VoiceInfo::set_supported_languages(int index, const char* value, size_t size) {
  supported_languages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:techmo.tts.VoiceInfo.supported_languages)
}
inline std::string* VoiceInfo::_internal_add_supported_languages() {
  return supported_languages_.Add();
}
inline void VoiceInfo::add_supported_languages(const std::string& value) {
  supported_languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:techmo.tts.VoiceInfo.supported_languages)
}
inline void VoiceInfo::add_supported_languages(std::string&& value) {
  supported_languages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:techmo.tts.VoiceInfo.supported_languages)
}
inline void VoiceInfo::add_supported_languages(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  supported_languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:techmo.tts.VoiceInfo.supported_languages)
}
inline void VoiceInfo::add_supported_languages(const char* value, size_t size) {
  supported_languages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:techmo.tts.VoiceInfo.supported_languages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VoiceInfo::supported_languages() const {
  // @@protoc_insertion_point(field_list:techmo.tts.VoiceInfo.supported_languages)
  return supported_languages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VoiceInfo::mutable_supported_languages() {
  // @@protoc_insertion_point(field_mutable_list:techmo.tts.VoiceInfo.supported_languages)
  return &supported_languages_;
}

// .techmo.tts.Voice voice = 2;
inline bool VoiceInfo::_internal_has_voice() const {
  return this != internal_default_instance() && voice_ != nullptr;
}
inline bool VoiceInfo::has_voice() const {
  return _internal_has_voice();
}
inline void VoiceInfo::clear_voice() {
  if (GetArenaNoVirtual() == nullptr && voice_ != nullptr) {
    delete voice_;
  }
  voice_ = nullptr;
}
inline const ::techmo::tts::Voice& VoiceInfo::_internal_voice() const {
  const ::techmo::tts::Voice* p = voice_;
  return p != nullptr ? *p : *reinterpret_cast<const ::techmo::tts::Voice*>(
      &::techmo::tts::_Voice_default_instance_);
}
inline const ::techmo::tts::Voice& VoiceInfo::voice() const {
  // @@protoc_insertion_point(field_get:techmo.tts.VoiceInfo.voice)
  return _internal_voice();
}
inline ::techmo::tts::Voice* VoiceInfo::release_voice() {
  // @@protoc_insertion_point(field_release:techmo.tts.VoiceInfo.voice)
  
  ::techmo::tts::Voice* temp = voice_;
  voice_ = nullptr;
  return temp;
}
inline ::techmo::tts::Voice* VoiceInfo::_internal_mutable_voice() {
  
  if (voice_ == nullptr) {
    auto* p = CreateMaybeMessage<::techmo::tts::Voice>(GetArenaNoVirtual());
    voice_ = p;
  }
  return voice_;
}
inline ::techmo::tts::Voice* VoiceInfo::mutable_voice() {
  // @@protoc_insertion_point(field_mutable:techmo.tts.VoiceInfo.voice)
  return _internal_mutable_voice();
}
inline void VoiceInfo::set_allocated_voice(::techmo::tts::Voice* voice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete voice_;
  }
  if (voice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      voice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voice, submessage_arena);
    }
    
  } else {
    
  }
  voice_ = voice;
  // @@protoc_insertion_point(field_set_allocated:techmo.tts.VoiceInfo.voice)
}

// -------------------------------------------------------------------

// SynthesizeResponse

// .techmo.tts.AudioData audio = 1;
inline bool SynthesizeResponse::_internal_has_audio() const {
  return this != internal_default_instance() && audio_ != nullptr;
}
inline bool SynthesizeResponse::has_audio() const {
  return _internal_has_audio();
}
inline void SynthesizeResponse::clear_audio() {
  if (GetArenaNoVirtual() == nullptr && audio_ != nullptr) {
    delete audio_;
  }
  audio_ = nullptr;
}
inline const ::techmo::tts::AudioData& SynthesizeResponse::_internal_audio() const {
  const ::techmo::tts::AudioData* p = audio_;
  return p != nullptr ? *p : *reinterpret_cast<const ::techmo::tts::AudioData*>(
      &::techmo::tts::_AudioData_default_instance_);
}
inline const ::techmo::tts::AudioData& SynthesizeResponse::audio() const {
  // @@protoc_insertion_point(field_get:techmo.tts.SynthesizeResponse.audio)
  return _internal_audio();
}
inline ::techmo::tts::AudioData* SynthesizeResponse::release_audio() {
  // @@protoc_insertion_point(field_release:techmo.tts.SynthesizeResponse.audio)
  
  ::techmo::tts::AudioData* temp = audio_;
  audio_ = nullptr;
  return temp;
}
inline ::techmo::tts::AudioData* SynthesizeResponse::_internal_mutable_audio() {
  
  if (audio_ == nullptr) {
    auto* p = CreateMaybeMessage<::techmo::tts::AudioData>(GetArenaNoVirtual());
    audio_ = p;
  }
  return audio_;
}
inline ::techmo::tts::AudioData* SynthesizeResponse::mutable_audio() {
  // @@protoc_insertion_point(field_mutable:techmo.tts.SynthesizeResponse.audio)
  return _internal_mutable_audio();
}
inline void SynthesizeResponse::set_allocated_audio(::techmo::tts::AudioData* audio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete audio_;
  }
  if (audio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      audio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio, submessage_arena);
    }
    
  } else {
    
  }
  audio_ = audio;
  // @@protoc_insertion_point(field_set_allocated:techmo.tts.SynthesizeResponse.audio)
}

// .techmo.tts.Error error = 2;
inline bool SynthesizeResponse::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool SynthesizeResponse::has_error() const {
  return _internal_has_error();
}
inline void SynthesizeResponse::clear_error() {
  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::techmo::tts::Error& SynthesizeResponse::_internal_error() const {
  const ::techmo::tts::Error* p = error_;
  return p != nullptr ? *p : *reinterpret_cast<const ::techmo::tts::Error*>(
      &::techmo::tts::_Error_default_instance_);
}
inline const ::techmo::tts::Error& SynthesizeResponse::error() const {
  // @@protoc_insertion_point(field_get:techmo.tts.SynthesizeResponse.error)
  return _internal_error();
}
inline ::techmo::tts::Error* SynthesizeResponse::release_error() {
  // @@protoc_insertion_point(field_release:techmo.tts.SynthesizeResponse.error)
  
  ::techmo::tts::Error* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::techmo::tts::Error* SynthesizeResponse::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::techmo::tts::Error>(GetArenaNoVirtual());
    error_ = p;
  }
  return error_;
}
inline ::techmo::tts::Error* SynthesizeResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:techmo.tts.SynthesizeResponse.error)
  return _internal_mutable_error();
}
inline void SynthesizeResponse::set_allocated_error(::techmo::tts::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:techmo.tts.SynthesizeResponse.error)
}

// -------------------------------------------------------------------

// AudioData

// int32 sample_rate_hertz = 1;
inline void AudioData::clear_sample_rate_hertz() {
  sample_rate_hertz_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioData::_internal_sample_rate_hertz() const {
  return sample_rate_hertz_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioData::sample_rate_hertz() const {
  // @@protoc_insertion_point(field_get:techmo.tts.AudioData.sample_rate_hertz)
  return _internal_sample_rate_hertz();
}
inline void AudioData::_internal_set_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sample_rate_hertz_ = value;
}
inline void AudioData::set_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sample_rate_hertz(value);
  // @@protoc_insertion_point(field_set:techmo.tts.AudioData.sample_rate_hertz)
}

// bytes content = 2;
inline void AudioData::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AudioData::content() const {
  // @@protoc_insertion_point(field_get:techmo.tts.AudioData.content)
  return _internal_content();
}
inline void AudioData::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:techmo.tts.AudioData.content)
}
inline std::string* AudioData::mutable_content() {
  // @@protoc_insertion_point(field_mutable:techmo.tts.AudioData.content)
  return _internal_mutable_content();
}
inline const std::string& AudioData::_internal_content() const {
  return content_.GetNoArena();
}
inline void AudioData::_internal_set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AudioData::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.tts.AudioData.content)
}
inline void AudioData::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.tts.AudioData.content)
}
inline void AudioData::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.tts.AudioData.content)
}
inline std::string* AudioData::_internal_mutable_content() {
  
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioData::release_content() {
  // @@protoc_insertion_point(field_release:techmo.tts.AudioData.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioData::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:techmo.tts.AudioData.content)
}

// -------------------------------------------------------------------

// PutLexiconRequest

// string name = 1;
inline void PutLexiconRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PutLexiconRequest::name() const {
  // @@protoc_insertion_point(field_get:techmo.tts.PutLexiconRequest.name)
  return _internal_name();
}
inline void PutLexiconRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:techmo.tts.PutLexiconRequest.name)
}
inline std::string* PutLexiconRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:techmo.tts.PutLexiconRequest.name)
  return _internal_mutable_name();
}
inline const std::string& PutLexiconRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void PutLexiconRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PutLexiconRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.tts.PutLexiconRequest.name)
}
inline void PutLexiconRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.tts.PutLexiconRequest.name)
}
inline void PutLexiconRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.tts.PutLexiconRequest.name)
}
inline std::string* PutLexiconRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PutLexiconRequest::release_name() {
  // @@protoc_insertion_point(field_release:techmo.tts.PutLexiconRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PutLexiconRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:techmo.tts.PutLexiconRequest.name)
}

// string content = 2;
inline void PutLexiconRequest::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PutLexiconRequest::content() const {
  // @@protoc_insertion_point(field_get:techmo.tts.PutLexiconRequest.content)
  return _internal_content();
}
inline void PutLexiconRequest::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:techmo.tts.PutLexiconRequest.content)
}
inline std::string* PutLexiconRequest::mutable_content() {
  // @@protoc_insertion_point(field_mutable:techmo.tts.PutLexiconRequest.content)
  return _internal_mutable_content();
}
inline const std::string& PutLexiconRequest::_internal_content() const {
  return content_.GetNoArena();
}
inline void PutLexiconRequest::_internal_set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PutLexiconRequest::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.tts.PutLexiconRequest.content)
}
inline void PutLexiconRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.tts.PutLexiconRequest.content)
}
inline void PutLexiconRequest::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.tts.PutLexiconRequest.content)
}
inline std::string* PutLexiconRequest::_internal_mutable_content() {
  
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PutLexiconRequest::release_content() {
  // @@protoc_insertion_point(field_release:techmo.tts.PutLexiconRequest.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PutLexiconRequest::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:techmo.tts.PutLexiconRequest.content)
}

// -------------------------------------------------------------------

// PutLexiconResponse

// .techmo.tts.Error error = 1;
inline bool PutLexiconResponse::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool PutLexiconResponse::has_error() const {
  return _internal_has_error();
}
inline void PutLexiconResponse::clear_error() {
  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::techmo::tts::Error& PutLexiconResponse::_internal_error() const {
  const ::techmo::tts::Error* p = error_;
  return p != nullptr ? *p : *reinterpret_cast<const ::techmo::tts::Error*>(
      &::techmo::tts::_Error_default_instance_);
}
inline const ::techmo::tts::Error& PutLexiconResponse::error() const {
  // @@protoc_insertion_point(field_get:techmo.tts.PutLexiconResponse.error)
  return _internal_error();
}
inline ::techmo::tts::Error* PutLexiconResponse::release_error() {
  // @@protoc_insertion_point(field_release:techmo.tts.PutLexiconResponse.error)
  
  ::techmo::tts::Error* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::techmo::tts::Error* PutLexiconResponse::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::techmo::tts::Error>(GetArenaNoVirtual());
    error_ = p;
  }
  return error_;
}
inline ::techmo::tts::Error* PutLexiconResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:techmo.tts.PutLexiconResponse.error)
  return _internal_mutable_error();
}
inline void PutLexiconResponse::set_allocated_error(::techmo::tts::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:techmo.tts.PutLexiconResponse.error)
}

// -------------------------------------------------------------------

// DeleteLexiconRequest

// string name = 1;
inline void DeleteLexiconRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteLexiconRequest::name() const {
  // @@protoc_insertion_point(field_get:techmo.tts.DeleteLexiconRequest.name)
  return _internal_name();
}
inline void DeleteLexiconRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:techmo.tts.DeleteLexiconRequest.name)
}
inline std::string* DeleteLexiconRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:techmo.tts.DeleteLexiconRequest.name)
  return _internal_mutable_name();
}
inline const std::string& DeleteLexiconRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void DeleteLexiconRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteLexiconRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.tts.DeleteLexiconRequest.name)
}
inline void DeleteLexiconRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.tts.DeleteLexiconRequest.name)
}
inline void DeleteLexiconRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.tts.DeleteLexiconRequest.name)
}
inline std::string* DeleteLexiconRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteLexiconRequest::release_name() {
  // @@protoc_insertion_point(field_release:techmo.tts.DeleteLexiconRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteLexiconRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:techmo.tts.DeleteLexiconRequest.name)
}

// -------------------------------------------------------------------

// DeleteLexiconResponse

// .techmo.tts.Error error = 1;
inline bool DeleteLexiconResponse::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool DeleteLexiconResponse::has_error() const {
  return _internal_has_error();
}
inline void DeleteLexiconResponse::clear_error() {
  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::techmo::tts::Error& DeleteLexiconResponse::_internal_error() const {
  const ::techmo::tts::Error* p = error_;
  return p != nullptr ? *p : *reinterpret_cast<const ::techmo::tts::Error*>(
      &::techmo::tts::_Error_default_instance_);
}
inline const ::techmo::tts::Error& DeleteLexiconResponse::error() const {
  // @@protoc_insertion_point(field_get:techmo.tts.DeleteLexiconResponse.error)
  return _internal_error();
}
inline ::techmo::tts::Error* DeleteLexiconResponse::release_error() {
  // @@protoc_insertion_point(field_release:techmo.tts.DeleteLexiconResponse.error)
  
  ::techmo::tts::Error* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::techmo::tts::Error* DeleteLexiconResponse::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::techmo::tts::Error>(GetArenaNoVirtual());
    error_ = p;
  }
  return error_;
}
inline ::techmo::tts::Error* DeleteLexiconResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:techmo.tts.DeleteLexiconResponse.error)
  return _internal_mutable_error();
}
inline void DeleteLexiconResponse::set_allocated_error(::techmo::tts::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:techmo.tts.DeleteLexiconResponse.error)
}

// -------------------------------------------------------------------

// GetLexiconRequest

// string name = 1;
inline void GetLexiconRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetLexiconRequest::name() const {
  // @@protoc_insertion_point(field_get:techmo.tts.GetLexiconRequest.name)
  return _internal_name();
}
inline void GetLexiconRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:techmo.tts.GetLexiconRequest.name)
}
inline std::string* GetLexiconRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:techmo.tts.GetLexiconRequest.name)
  return _internal_mutable_name();
}
inline const std::string& GetLexiconRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void GetLexiconRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetLexiconRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.tts.GetLexiconRequest.name)
}
inline void GetLexiconRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.tts.GetLexiconRequest.name)
}
inline void GetLexiconRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.tts.GetLexiconRequest.name)
}
inline std::string* GetLexiconRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetLexiconRequest::release_name() {
  // @@protoc_insertion_point(field_release:techmo.tts.GetLexiconRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetLexiconRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:techmo.tts.GetLexiconRequest.name)
}

// -------------------------------------------------------------------

// GetLexiconResponse

// string content = 1;
inline void GetLexiconResponse::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetLexiconResponse::content() const {
  // @@protoc_insertion_point(field_get:techmo.tts.GetLexiconResponse.content)
  return _internal_content();
}
inline void GetLexiconResponse::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:techmo.tts.GetLexiconResponse.content)
}
inline std::string* GetLexiconResponse::mutable_content() {
  // @@protoc_insertion_point(field_mutable:techmo.tts.GetLexiconResponse.content)
  return _internal_mutable_content();
}
inline const std::string& GetLexiconResponse::_internal_content() const {
  return content_.GetNoArena();
}
inline void GetLexiconResponse::_internal_set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetLexiconResponse::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.tts.GetLexiconResponse.content)
}
inline void GetLexiconResponse::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.tts.GetLexiconResponse.content)
}
inline void GetLexiconResponse::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.tts.GetLexiconResponse.content)
}
inline std::string* GetLexiconResponse::_internal_mutable_content() {
  
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetLexiconResponse::release_content() {
  // @@protoc_insertion_point(field_release:techmo.tts.GetLexiconResponse.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetLexiconResponse::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:techmo.tts.GetLexiconResponse.content)
}

// .techmo.tts.Error error = 2;
inline bool GetLexiconResponse::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool GetLexiconResponse::has_error() const {
  return _internal_has_error();
}
inline void GetLexiconResponse::clear_error() {
  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::techmo::tts::Error& GetLexiconResponse::_internal_error() const {
  const ::techmo::tts::Error* p = error_;
  return p != nullptr ? *p : *reinterpret_cast<const ::techmo::tts::Error*>(
      &::techmo::tts::_Error_default_instance_);
}
inline const ::techmo::tts::Error& GetLexiconResponse::error() const {
  // @@protoc_insertion_point(field_get:techmo.tts.GetLexiconResponse.error)
  return _internal_error();
}
inline ::techmo::tts::Error* GetLexiconResponse::release_error() {
  // @@protoc_insertion_point(field_release:techmo.tts.GetLexiconResponse.error)
  
  ::techmo::tts::Error* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::techmo::tts::Error* GetLexiconResponse::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::techmo::tts::Error>(GetArenaNoVirtual());
    error_ = p;
  }
  return error_;
}
inline ::techmo::tts::Error* GetLexiconResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:techmo.tts.GetLexiconResponse.error)
  return _internal_mutable_error();
}
inline void GetLexiconResponse::set_allocated_error(::techmo::tts::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:techmo.tts.GetLexiconResponse.error)
}

// -------------------------------------------------------------------

// ListLexiconsRequest

// string language = 1;
inline void ListLexiconsRequest::clear_language() {
  language_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListLexiconsRequest::language() const {
  // @@protoc_insertion_point(field_get:techmo.tts.ListLexiconsRequest.language)
  return _internal_language();
}
inline void ListLexiconsRequest::set_language(const std::string& value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:techmo.tts.ListLexiconsRequest.language)
}
inline std::string* ListLexiconsRequest::mutable_language() {
  // @@protoc_insertion_point(field_mutable:techmo.tts.ListLexiconsRequest.language)
  return _internal_mutable_language();
}
inline const std::string& ListLexiconsRequest::_internal_language() const {
  return language_.GetNoArena();
}
inline void ListLexiconsRequest::_internal_set_language(const std::string& value) {
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListLexiconsRequest::set_language(std::string&& value) {
  
  language_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.tts.ListLexiconsRequest.language)
}
inline void ListLexiconsRequest::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.tts.ListLexiconsRequest.language)
}
inline void ListLexiconsRequest::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.tts.ListLexiconsRequest.language)
}
inline std::string* ListLexiconsRequest::_internal_mutable_language() {
  
  return language_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListLexiconsRequest::release_language() {
  // @@protoc_insertion_point(field_release:techmo.tts.ListLexiconsRequest.language)
  
  return language_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListLexiconsRequest::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:techmo.tts.ListLexiconsRequest.language)
}

// -------------------------------------------------------------------

// ListLexiconsResponse

// repeated string names = 1;
inline int ListLexiconsResponse::_internal_names_size() const {
  return names_.size();
}
inline int ListLexiconsResponse::names_size() const {
  return _internal_names_size();
}
inline void ListLexiconsResponse::clear_names() {
  names_.Clear();
}
inline std::string* ListLexiconsResponse::add_names() {
  // @@protoc_insertion_point(field_add_mutable:techmo.tts.ListLexiconsResponse.names)
  return _internal_add_names();
}
inline const std::string& ListLexiconsResponse::_internal_names(int index) const {
  return names_.Get(index);
}
inline const std::string& ListLexiconsResponse::names(int index) const {
  // @@protoc_insertion_point(field_get:techmo.tts.ListLexiconsResponse.names)
  return _internal_names(index);
}
inline std::string* ListLexiconsResponse::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:techmo.tts.ListLexiconsResponse.names)
  return names_.Mutable(index);
}
inline void ListLexiconsResponse::set_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:techmo.tts.ListLexiconsResponse.names)
  names_.Mutable(index)->assign(value);
}
inline void ListLexiconsResponse::set_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:techmo.tts.ListLexiconsResponse.names)
  names_.Mutable(index)->assign(std::move(value));
}
inline void ListLexiconsResponse::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:techmo.tts.ListLexiconsResponse.names)
}
inline void ListLexiconsResponse::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:techmo.tts.ListLexiconsResponse.names)
}
inline std::string* ListLexiconsResponse::_internal_add_names() {
  return names_.Add();
}
inline void ListLexiconsResponse::add_names(const std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:techmo.tts.ListLexiconsResponse.names)
}
inline void ListLexiconsResponse::add_names(std::string&& value) {
  names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:techmo.tts.ListLexiconsResponse.names)
}
inline void ListLexiconsResponse::add_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:techmo.tts.ListLexiconsResponse.names)
}
inline void ListLexiconsResponse::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:techmo.tts.ListLexiconsResponse.names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListLexiconsResponse::names() const {
  // @@protoc_insertion_point(field_list:techmo.tts.ListLexiconsResponse.names)
  return names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListLexiconsResponse::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:techmo.tts.ListLexiconsResponse.names)
  return &names_;
}

// -------------------------------------------------------------------

// Error

// .techmo.tts.ErrorCode code = 1;
inline void Error::clear_code() {
  code_ = 0;
}
inline ::techmo::tts::ErrorCode Error::_internal_code() const {
  return static_cast< ::techmo::tts::ErrorCode >(code_);
}
inline ::techmo::tts::ErrorCode Error::code() const {
  // @@protoc_insertion_point(field_get:techmo.tts.Error.code)
  return _internal_code();
}
inline void Error::_internal_set_code(::techmo::tts::ErrorCode value) {
  
  code_ = value;
}
inline void Error::set_code(::techmo::tts::ErrorCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:techmo.tts.Error.code)
}

// string description = 2;
inline void Error::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Error::description() const {
  // @@protoc_insertion_point(field_get:techmo.tts.Error.description)
  return _internal_description();
}
inline void Error::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:techmo.tts.Error.description)
}
inline std::string* Error::mutable_description() {
  // @@protoc_insertion_point(field_mutable:techmo.tts.Error.description)
  return _internal_mutable_description();
}
inline const std::string& Error::_internal_description() const {
  return description_.GetNoArena();
}
inline void Error::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Error::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.tts.Error.description)
}
inline void Error::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.tts.Error.description)
}
inline void Error::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.tts.Error.description)
}
inline std::string* Error::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Error::release_description() {
  // @@protoc_insertion_point(field_release:techmo.tts.Error.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:techmo.tts.Error.description)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tts
}  // namespace techmo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::techmo::tts::AudioEncoding> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::techmo::tts::AudioEncoding>() {
  return ::techmo::tts::AudioEncoding_descriptor();
}
template <> struct is_proto_enum< ::techmo::tts::Gender> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::techmo::tts::Gender>() {
  return ::techmo::tts::Gender_descriptor();
}
template <> struct is_proto_enum< ::techmo::tts::Age> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::techmo::tts::Age>() {
  return ::techmo::tts::Age_descriptor();
}
template <> struct is_proto_enum< ::techmo::tts::ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::techmo::tts::ErrorCode>() {
  return ::techmo::tts::ErrorCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_techmo_5ftts_2eproto
